#!/bin/sh
#
# CherryMusic - a standalone music server
# Copyright (c) 2012 - 2014 Tom Wallroth & Tilman Boerner
#
# Project page:
#   http://fomori.org/cherrymusic/
# Sources on github:
#   http://github.com/devsnd/cherrymusic/
#
# CherryMusic is based on
#   jPlayer (GPL/MIT license) http://www.jplayer.org/
#   CherryPy (BSD license) http://www.cherrypy.org/
#
# licensed under GNU GPL version 3 (or later)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#
##############################################################################
#
# git pre-commit hook. place an executable link to this file into .git/hooks to 
# execute automatically check and verify the git index before each commit.
#
##############################################################################

echo "executing pre-commit hook: $0"

gitroot=`git rev-parse --show-toplevel`
testrunner=${gitroot}/runtests
if [ ! -f ${testrunner} -o ! -x ${testrunner} ]; then
    echo "error: cannot find testrunner script: ${testrunner}" >&2
    exit 1
fi

echo stashing unstaged changes...
git stash -q --include-untracked --keep-index

${testrunner}
success=$?

echo restoring unstaged changes...
git stash pop -q

if [ ${success} != 0 ]; then
    echo "test failure!" >&2
    exit 1
fi

# the following is taken from pre-commit.sample in the git distribution

if git rev-parse --verify HEAD >/dev/null 2>&1
then
        against=HEAD
else
        # Initial commit: diff against an empty tree object
        against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# If you want to allow non-ascii filenames set this variable to true.
allownonascii=$(git config hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ascii filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
        # Note that the use of brackets around a tr range is ok here, (it's
        # even required, for portability to Solaris 10's /usr/bin/tr), since
        # the square bracket bytes happen to fall in the designated range.
        test $(git diff --cached --name-only --diff-filter=A -z $against |
          LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
        echo "Error: Attempt to add a non-ascii file name."
        echo
        echo "This can cause problems if you want to work"
        echo "with people on other platforms."
        echo
        echo "To be portable it is advisable to rename the file ..."
        echo
        echo "If you know what you are doing you can disable this"
        echo "check using:"
        echo
        echo "  git config hooks.allownonascii true"
        echo
        exit 1
fi

python3 deploy.py

if hash xgettext 2>/dev/null; then
    python3 ${gitroot}/res/i18n/update_translations.py
fi

# If there are whitespace errors, print the offending file names and fail.
#exec git diff-index --check --cached $against --

